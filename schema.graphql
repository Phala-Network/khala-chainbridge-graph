enum ProposalStatus {
    Inactive
    Active
    Passed
    Executed
    Cancelled
}

type Tx @entity {
    id: ID!
    hash: String!
    sender: String!
}

type CTxSent @entity {
    id: ID!
    createdAt: BigInt!

    # destChainId and depositNonce can be used to track
    # crosschain transfer status on dest chain
    destChainId: Int! @index
    depositNonce: BigInt! @index

    resourceId: String! @index
    amount: BigInt
    recipient: String @index

    # The deposit transaction send by user
    sendTx: Tx
    # Sender can be used to construct user transaction history
    sender: String @index

    # Index used to support query specific range of records
    index: Int!
}

type CTxReceived @entity {
    id: ID!
    createdAt: BigInt!

    # Origin chain can use destChainId and depositNonce to track
    # crosschain transfer status on this chain
    originChainId: Int! @index
    depositNonce: BigInt! @index

    resourceId: String! @index
    # Proposal status being updated when vote happened
    status: ProposalStatus
    # Relayers vote transaction
    voteTxs: [Tx!]!
    # Relayer execution transaction
    executeTx: Tx
}

type ERC20Deposited @entity {
    id: ID!
    createdAt: BigInt!

    token: String! @index
    recipient: String! @index
    amount: BigInt!
    # The relevant transaction, should equal to executeTx of CTxReceived
    tx: Tx

    # Index used to support query specific range of records
    # We save index here rather than CTxReceived because we can not get recipient from it
    index: Int!
}

type ERC20Withdrawn @entity {
    id: ID!
    createdAt: BigInt!

    token: String! @index
    depositer: String! @index
    amount: BigInt!
    # The relevant transaction, should equal to sendTx of CTxSent
    tx: Tx
}

# Save sending transaction count, id should be sender address
type SendingCount @entity {
    id: ID!
    count: Int!
}

# Save receving transaction count, id should be recipient address
type RecevingCount @entity {
    id: ID!
    count: Int!
}
